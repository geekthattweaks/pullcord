package proxy

import (
	"fmt"
	"io/ioutil"
	"net"
	"net/http"
	"net/http/httptest"
	"net/url"
	"regexp"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	configutil "github.com/stuphlabs/pullcord/config/util"
	"github.com/stuphlabs/pullcord/util"
)

func getLandingResponder(t *testing.T) (*url.URL, error) {
	l, e := net.Listen("tcp", "")
	if e != nil {
		return nil, e
	}

	a := l.Addr()

	u, e := url.Parse(fmt.Sprintf("http://%s/", a.String()))
	if e != nil {
		return nil, e
	}

	go func(t *testing.T, l net.Listener) {
		e := http.Serve(l, new(util.LandingFilter))
		require.NoError(t, e)
	}(t, l)

	return u, nil
}

// TestPassthru verifies that a Falcore RequestFilter generated by
// NewPassthruFilter will forward web traffic as expected.
func TestPassthru(t *testing.T) {
	request := httptest.NewRequest("GET", "http://localhost", nil)

	regex, err := regexp.Compile("Pullcord Landing Page")
	require.NoError(t, err)

	remoteServer, err := getLandingResponder(t)
	assert.NoError(t, err)

	passthru := NewPassthruFilter(remoteServer)

	w := httptest.NewRecorder()
	passthru.ServeHTTP(w, request)
	response := w.Result()

	assert.Equal(t, 200, response.StatusCode)
	contents, err := ioutil.ReadAll(response.Body)
	assert.NoError(t, err)
	assert.True(t, regex.Match(contents))
}

func TestPassthruFilterFromConfig(t *testing.T) {
	test := configutil.ConfigTest{
		ResourceType: "passthrufilter",
		SyntacticallyBad: []configutil.ConfigTestData{
			{
				Data:        "",
				Explanation: "empty config",
			},
			{
				Data: `{
					"host": 7,
					"port": 11
				}`,
				Explanation: "numeric host",
			},
			{
				Data: `{
					"host": "127.0.0.1",
					"port": "8080"
				}`,
				Explanation: "string port",
			},
			{
				Data:        "42",
				Explanation: "numeric config",
			},
			{
				Data: `{
					"host": "not a real host",
					"port": 8080
				}`,
				Explanation: "bad host string",
			},
		},
		Good: []configutil.ConfigTestData{
			{
				Data: `{
					"host": "127.0.0.1",
					"port": 80
				}`,
				Explanation: "basic valid proxy config",
			},
		},
	}
	test.Run(t)
}
