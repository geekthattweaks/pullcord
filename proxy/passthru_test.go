package proxy

import (
	"github.com/fitstar/falcore"
	"github.com/stretchr/testify/assert"
	"github.com/stuphlabs/pullcord"
	"io/ioutil"
	"net/http"
	"regexp"
	"testing"
	"time"
)

// serveLandingPage is a testing helper function that creates a webserver that
// other tests for NewPassthruFilter can use to verify expected proxying
// behaviors.
func serveLandingPage(landingServer *falcore.Server) {
	err := landingServer.ListenAndServe()
	if err != nil {
		panic(err)
	}
}

// TestPassthru verifies that a Falcore RequestFilter generated by
// NewPassthruFilter will forward web traffic as expected.
func TestPassthru(t *testing.T) {
	request, err := http.NewRequest("GET", "http://localhost", nil)
	assert.NoError(t, err)

	landingPipeline := falcore.NewPipeline()
	landingPipeline.Upstream.PushBack(pullcord.NewLandingFilter())

	landingServer := falcore.NewServer(58080, landingPipeline)

	regex, err := regexp.Compile("Pullcord Landing Page")
	assert.NoError(t, err)

	go serveLandingPage(landingServer)
	defer landingServer.StopAccepting()

	sleepDuration, err := time.ParseDuration("1s")
	assert.NoError(t, err)
	time.Sleep(sleepDuration)

	_, response := falcore.TestWithRequest(
		request,
		NewPassthruFilter("localhost", 58080),
		nil,
	)
	assert.Equal(t, 200, response.StatusCode)
	contents, err := ioutil.ReadAll(response.Body)
	assert.NoError(t, err)
	assert.True(t, regex.Match(contents))
}
