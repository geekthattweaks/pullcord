package authentication

import (
	"github.com/stretchr/testify/assert"
	// "github.com/stuphlabs/pullcord"
	"testing"
)

func TestBadIdentifier(t *testing.T) {
	identifier := "test_user"
	password := "SuperAwes0meP@ssword"

	store := NewInMemPwdStore()
	err := store.CheckPassword(identifier, password)

	assert.Error(t, err)
	assert.Equal(t, NoSuchIdentifierError, err)
}

func TestGoodPassword(t *testing.T) {
	identifier := "test_user"
	password := "SuperAwes0meP@ssword"

	store := NewInMemPwdStore()
	err := store.SetPassword(identifier, password, Pbkdf2MinIterations)
	assert.NoError(t, err)

	err = store.CheckPassword(identifier, password)
	assert.NoError(t, err)
}

func TestBadPassword(t *testing.T) {
	identifier := "test_user"
	password := "SuperAwes0meP@ssword"
	badPassword := "someOtherPassword"

	store := NewInMemPwdStore()
	err := store.SetPassword(identifier, password, Pbkdf2MinIterations)
	assert.NoError(t, err)

	err = store.CheckPassword(identifier, badPassword)
	assert.Error(t, err)
	assert.Equal(t, BadPasswordError, err)
}

func TestGoodPasswordFromHash(t *testing.T) {
	identifier := "test_user"
	password := "SuperAwes0meP@ssword"
	salt := [64]byte{
		0x44, 0xc3, 0x34, 0x58, 0x45, 0x78, 0xb3, 0x4b, 0xf1, 0x65,
		0x66, 0xfd, 0x62, 0xfc, 0x34, 0xa2, 0x80, 0x54, 0xd4, 0x1b,
		0x3d, 0x96, 0x8b, 0xb3, 0xa8, 0xdb, 0x1a, 0xfb, 0xf1, 0x3f,
		0x49, 0x5c, 0xd9, 0x83, 0xe7, 0xb3, 0xef, 0x64, 0xcb, 0xa1,
		0x72, 0xfc, 0xa4, 0x53, 0x8e, 0xce, 0x4d, 0x9a, 0x38, 0x53,
		0xb9, 0x5c, 0xbb, 0x5b, 0x48, 0x40, 0x98, 0x29, 0x42, 0xbb,
		0x5e, 0xd1, 0x7e, 0x65,
	}
	iterations := uint16(4096)
	hash := [64]byte{
		0xdc, 0x4c, 0xee, 0xd1, 0x10, 0x25, 0x0d, 0x73, 0x61, 0x92,
		0xf9, 0xd5, 0xab, 0x41, 0xf8, 0xcf, 0xfd, 0x1d, 0x52, 0xb2,
		0x2d, 0x7d, 0xdd, 0x82, 0xc9, 0x84, 0x74, 0xea, 0xef, 0xda,
		0xac, 0x0e, 0x9f, 0xf5, 0x70, 0x1e, 0x00, 0x0d, 0x14, 0x59,
		0x60, 0x7f, 0xf7, 0x2f, 0xf4, 0x7d, 0x03, 0x95, 0x99, 0x98,
		0xbb, 0x5f, 0x1c, 0xa2, 0x78, 0xfb, 0x51, 0xfe, 0x10, 0xb7,
		0xde, 0xd3, 0x56, 0x5e,
	}

	store := NewInMemPwdStore()
	err := store.SetPbkdf2Hash(identifier, hash, salt, iterations)
	assert.NoError(t, err)

	err = store.CheckPassword(identifier, password)
	assert.NoError(t, err)
}

func TestBadPasswordFromHash(t *testing.T) {
	identifier := "test_user"
	password := "someOtherPassword"
	salt := [64]byte{
		0x44, 0xc3, 0x34, 0x58, 0x45, 0x78, 0xb3, 0x4b, 0xf1, 0x65,
		0x66, 0xfd, 0x62, 0xfc, 0x34, 0xa2, 0x80, 0x54, 0xd4, 0x1b,
		0x3d, 0x96, 0x8b, 0xb3, 0xa8, 0xdb, 0x1a, 0xfb, 0xf1, 0x3f,
		0x49, 0x5c, 0xd9, 0x83, 0xe7, 0xb3, 0xef, 0x64, 0xcb, 0xa1,
		0x72, 0xfc, 0xa4, 0x53, 0x8e, 0xce, 0x4d, 0x9a, 0x38, 0x53,
		0xb9, 0x5c, 0xbb, 0x5b, 0x48, 0x40, 0x98, 0x29, 0x42, 0xbb,
		0x5e, 0xd1, 0x7e, 0x65,
	}
	iterations := uint16(4096)
	hash := [64]byte{
		0xdc, 0x4c, 0xee, 0xd1, 0x10, 0x25, 0x0d, 0x73, 0x61, 0x92,
		0xf9, 0xd5, 0xab, 0x41, 0xf8, 0xcf, 0xfd, 0x1d, 0x52, 0xb2,
		0x2d, 0x7d, 0xdd, 0x82, 0xc9, 0x84, 0x74, 0xea, 0xef, 0xda,
		0xac, 0x0e, 0x9f, 0xf5, 0x70, 0x1e, 0x00, 0x0d, 0x14, 0x59,
		0x60, 0x7f, 0xf7, 0x2f, 0xf4, 0x7d, 0x03, 0x95, 0x99, 0x98,
		0xbb, 0x5f, 0x1c, 0xa2, 0x78, 0xfb, 0x51, 0xfe, 0x10, 0xb7,
		0xde, 0xd3, 0x56, 0x5e,
	}

	store := NewInMemPwdStore()
	err := store.SetPbkdf2Hash(identifier, hash, salt, iterations)
	assert.NoError(t, err)

	err = store.CheckPassword(identifier, password)
	assert.Error(t, err)
	assert.Equal(t, BadPasswordError, err)
}

func TestInsufficientIterationsHash(t *testing.T) {
	identifier := "test_user"
	salt := [64]byte{
		0x44, 0xc3, 0x34, 0x58, 0x45, 0x78, 0xb3, 0x4b, 0xf1, 0x65,
		0x66, 0xfd, 0x62, 0xfc, 0x34, 0xa2, 0x80, 0x54, 0xd4, 0x1b,
		0x3d, 0x96, 0x8b, 0xb3, 0xa8, 0xdb, 0x1a, 0xfb, 0xf1, 0x3f,
		0x49, 0x5c, 0xd9, 0x83, 0xe7, 0xb3, 0xef, 0x64, 0xcb, 0xa1,
		0x72, 0xfc, 0xa4, 0x53, 0x8e, 0xce, 0x4d, 0x9a, 0x38, 0x53,
		0xb9, 0x5c, 0xbb, 0x5b, 0x48, 0x40, 0x98, 0x29, 0x42, 0xbb,
		0x5e, 0xd1, 0x7e, 0x65,
	}
	iterations := Pbkdf2MinIterations - 1
	hash := [64]byte{
		0xdc, 0x4c, 0xee, 0xd1, 0x10, 0x25, 0x0d, 0x73, 0x61, 0x92,
		0xf9, 0xd5, 0xab, 0x41, 0xf8, 0xcf, 0xfd, 0x1d, 0x52, 0xb2,
		0x2d, 0x7d, 0xdd, 0x82, 0xc9, 0x84, 0x74, 0xea, 0xef, 0xda,
		0xac, 0x0e, 0x9f, 0xf5, 0x70, 0x1e, 0x00, 0x0d, 0x14, 0x59,
		0x60, 0x7f, 0xf7, 0x2f, 0xf4, 0x7d, 0x03, 0x95, 0x99, 0x98,
		0xbb, 0x5f, 0x1c, 0xa2, 0x78, 0xfb, 0x51, 0xfe, 0x10, 0xb7,
		0xde, 0xd3, 0x56, 0x5e,
	}

	store := NewInMemPwdStore()
	err := store.SetPbkdf2Hash(identifier, hash, salt, iterations)
	assert.Error(t, err)
	assert.Equal(t, InsufficientIterationsError, err)
}

func TestInsufficientIterations(t *testing.T) {
	identifier := "test_user"
	password := "SuperAwes0meP@ssword"
	iterations := Pbkdf2MinIterations - 1

	store := NewInMemPwdStore()
	err := store.SetPassword(identifier, password, iterations)
	assert.Error(t, err)
	assert.Equal(t, InsufficientIterationsError, err)
}

